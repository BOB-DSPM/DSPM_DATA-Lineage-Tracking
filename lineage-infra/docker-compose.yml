version: "3.9"

services:
  db:
    image: postgres:16
    container_name: dspm-lineage-pg
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-marquez}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-marquez}
    volumes:
      - marquez_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-marquez}"]
      interval: 10s
      timeout: 5s
      retries: 10
    # 포스트그레스 포트를 외부로 열 필요 없으면 ports 생략 (내부 통신만)
    # ports:
    #   - "${PG_PORT:-5432}:5432"

  marquez:
    image: marquezproject/marquez:${MARQUEZ_TAG:-0.28.0}
    container_name: dspm-marquez
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    environment:
      MARQUEZ_CONFIG: /app/config.yml
      # CORS 허용 (UI가 다른 호스트/포트에서 접근할 때)
      MARQUEZ_CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-*}
    volumes:
      - ./marquez-config.yml:/app/config.yml:ro
    ports:
      - "${API_PORT:-5000}:5000"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:5000/api/v1/namespaces"]
      interval: 15s
      timeout: 5s
      retries: 10

  ui:
    image: marquezproject/marquez-web:${MARQUEZ_WEB_TAG:-0.28.0}
    container_name: dspm-marquez-ui
    depends_on:
      marquez:
        condition: service_healthy
    restart: unless-stopped
    environment:
      # 내부 네트워크에선 서비스명으로 접근
      MARQUEZ_URL: "http://marquez:5000"
    ports:
      - "${UI_PORT:-3000}:3000"

volumes:
  marquez_db_data:
